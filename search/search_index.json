{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tinyvdiff","text":"<p>Minimalist visual regression testing plugin for pytest.</p> <p>Learn more about the idea behind tinyvdiff. To use it in your project, follow the setup guide.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install tinyvdiff from PyPI:</p> <pre><code>pip install tinyvdiff\n</code></pre> <p>Or install the development version from GitHub:</p> <pre><code>git clone https://github.com/nanxstats/tinyvdiff.git\ncd tinyvdiff\npython3 -m pip install -e .\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#tinyvdiff-040","title":"tinyvdiff 0.4.0","text":""},{"location":"changelog/#typing","title":"Typing","text":"<ul> <li>Add mypy as a development dependency and fix all mypy type checking issues (#39).</li> </ul>"},{"location":"changelog/#maintenance","title":"Maintenance","text":"<ul> <li>Add a GitHub Actions workflow to run mypy checks and a mypy badge to <code>README.md</code> (#40).</li> </ul>"},{"location":"changelog/#tinyvdiff-039","title":"tinyvdiff 0.3.9","text":""},{"location":"changelog/#maintenance_1","title":"Maintenance","text":"<ul> <li>Removed download statistics badge from <code>README.md</code> due to availability issues   with the service (#35).</li> <li>Use Python 3.13.7 for the default package development environment (#36).</li> </ul>"},{"location":"changelog/#tinyvdiff-038","title":"tinyvdiff 0.3.8","text":""},{"location":"changelog/#testing","title":"Testing","text":"<ul> <li>Updated SVG snapshot files using the latest version of pdf2svg (0.2.4)   from Homebrew so that the macOS-only snapshot tests pass correctly (#32).</li> </ul>"},{"location":"changelog/#tinyvdiff-037","title":"tinyvdiff 0.3.7","text":""},{"location":"changelog/#maintenance_2","title":"Maintenance","text":"<ul> <li>Use uv to manage project (#30).</li> </ul>"},{"location":"changelog/#tinyvdiff-036","title":"tinyvdiff 0.3.6","text":""},{"location":"changelog/#maintenance_3","title":"Maintenance","text":"<ul> <li>Changed logo typeface for a fresh look. Updated the logo text rendering   workflow to use SVG and web browsers for better results (#28).</li> </ul>"},{"location":"changelog/#tinyvdiff-035","title":"tinyvdiff 0.3.5","text":""},{"location":"changelog/#maintenance_4","title":"Maintenance","text":"<ul> <li>Changed logo image path from relative to absolute URL for proper rendering   on PyPI (#26).</li> </ul>"},{"location":"changelog/#tinyvdiff-034","title":"tinyvdiff 0.3.4","text":""},{"location":"changelog/#maintenance_5","title":"Maintenance","text":"<ul> <li>Use isort and ruff to sort imports and format Python code.   Use shell-format to format shell scripts (#24).</li> </ul>"},{"location":"changelog/#tinyvdiff-033","title":"tinyvdiff 0.3.3","text":""},{"location":"changelog/#maintenance_6","title":"Maintenance","text":"<ul> <li>Add Python 3.13 to the list of supported Python versions and   use it for the default package development environment (#22).</li> <li>Add badges for CI tests and mkdocs workflows to <code>README.md</code> (#23).</li> </ul>"},{"location":"changelog/#tinyvdiff-032","title":"tinyvdiff 0.3.2","text":""},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>Use <code>pip</code> and <code>python3</code> in installation instructions consistently.</li> <li>Use more specific package description.</li> </ul>"},{"location":"changelog/#tinyvdiff-031","title":"tinyvdiff 0.3.1","text":""},{"location":"changelog/#documentation_1","title":"Documentation","text":"<ul> <li>Added a setup guide article   with a demo project detailing the steps and practical considerations for   using tinyvdiff in projects (#20).</li> </ul>"},{"location":"changelog/#tinyvdiff-030","title":"tinyvdiff 0.3.0","text":""},{"location":"changelog/#new-features","title":"New features","text":"<ul> <li>The pytest plugin now supports multi-page PDF files.   Each multi-page PDF will correspond to SVG snapshots with file name   suffixes <code>_p1.svg</code>, <code>_p2.svg</code>, <code>...</code> (#15).</li> <li>Added a pytest parser option <code>--tinyvdiff-pdf2svg</code> to allow specifying a   custom path to <code>pdf2svg</code> in test files or project-wide <code>conftest.py</code>   when needed (#18).</li> </ul>"},{"location":"changelog/#testing_1","title":"Testing","text":"<ul> <li>Added unit tests for the low-level conversion and snapshotting facilities   that support the pytest plugin (#17).</li> </ul>"},{"location":"changelog/#improvements","title":"Improvements","text":"<ul> <li>Exposed key functions in <code>__init__.py</code> so that users can use the simpler   <code>import tinyvdiff as tvd</code> and <code>tvd.</code> syntax to access them (#16).</li> </ul>"},{"location":"changelog/#tinyvdiff-020","title":"tinyvdiff 0.2.0","text":""},{"location":"changelog/#new-features_1","title":"New features","text":"<ul> <li>Added a pytest plugin for visual regression testing (#11).</li> </ul>"},{"location":"changelog/#improvements_1","title":"Improvements","text":"<ul> <li>Refactored type hints to use shorthand syntax for union and optional types.   As a result, tinyvdiff now requires Python &gt;= 3.10 (#4).</li> </ul>"},{"location":"changelog/#tinyvdiff-010","title":"tinyvdiff 0.1.0","text":""},{"location":"changelog/#new-features_2","title":"New features","text":"<ul> <li>Implemented a wrapper for the <code>pdf2svg</code> command line tool to convert   PDF files to SVG format.</li> </ul>"},{"location":"articles/design/","title":"Design","text":""},{"location":"articles/design/#visual-regression-testing-is-hard","title":"Visual regression testing is hard","text":"<p>Designing a visual regression testing framework involves balancing several competing challenges, particularly when it comes to the snapshot file format used for comparisons. The ideal format must meet three seemingly conflicting criteria:</p> <ol> <li>Support for diverse input types: Graphics and documents are often    generated using different tools and formats (for example, PNG and PDF),    making direct comparisons difficult.</li> <li>Bitwise reproducibility in plain text: The format should capture the    precise appearance of the output while being deterministic and easy to    inspect visually.</li> <li>Platform independence: Subtle differences in system fonts or    dependencies can lead to inconsistent outputs across environments,    yet the format should produce visually identical results on any system.</li> </ol>"},{"location":"articles/design/#visual-regression-testing-is-easy","title":"Visual regression testing is easy","text":"<p>tinyvdiff takes a pragmatic approach by relaxing the third criterion and making reasonable assumptions about the first to deliver a simple yet effective solution:</p> <ol> <li>Input files must be in vector PDF format, which are then converted to    vector SVG snapshots, leaving it to developers to choose the tools    and workflows for generating the PDFs.</li> <li>PDFs are converted to vector SVG using <code>pdf2svg</code> for comparison.</li> <li>We assume it is sufficient to run visual regression tests in a single    CI/CD operating system environment. Snapshots should be generated in a    similar OS environment to ensure consistency with the CI/CD system.</li> </ol>"},{"location":"articles/setup/","title":"Setup guide","text":"<p>Tip</p> <p>A project demonstrating most of the setups in this guide is available from this GitHub repository: https://github.com/nanxstats/tinyvdiff-demo.</p>"},{"location":"articles/setup/#overview","title":"Overview","text":"<p>Setting up tinyvdiff for your project is similar to using other pytest plugins. In this guide, we will describe the key steps and the important details.</p> <ul> <li> <p>Install Python dependency and system dependency in both   local development environment and CI/CD environment.</p> </li> <li> <p>In the development envirnment:</p> <ul> <li>Write tests that produces (stable) PDF outputs.</li> <li>Run <code>pytest --tinyvdiff-update</code> to generate SVG snapshots as ground truth.</li> <li>Track the snapshots in version control.</li> </ul> </li> <li> <p>In CI/CD workflows:</p> <ul> <li>Select an operating system to run these tests. It should produce   technically similar PDF outputs to those from the development environment.</li> <li>Run <code>pytest</code> to compare the live results to the snapshot SVGs.</li> </ul> </li> </ul> <p>This guide assumes you use pytest in your project and the CI/CD workflow already works.</p>"},{"location":"articles/setup/#install-tinyvdiff","title":"Install tinyvdiff","text":"<p>Add and install tinyvdiff as a development dependency. If you use uv:</p> <pre><code>uv add --dev tinyvdiff\n</code></pre> <p>Next, install tinyvdiff in your CI/CD workflow. This could vary depending on how your workflow adds/installs Python dependencies. One canonical way is to install from PyPI:</p> <pre><code>pip install tinyvdiff\n</code></pre>"},{"location":"articles/setup/#install-pdf2svg","title":"Install pdf2svg","text":"<p>tinyvdiff requires the <code>pdf2svg</code> command line tool to convert PDF to SVG. The easiest way to make <code>pdf2svg</code> available locally is to install it via these commands.</p> <p>On macOS (using Homebrew):</p> <pre><code>brew install pdf2svg\n</code></pre> <p>On Debian/Ubuntu:</p> <pre><code>sudo apt-get install pdf2svg\n</code></pre> <p>On Windows (using Chocolatey):</p> <pre><code>choco install pdf2svg-win\n</code></pre> <p>You can use exactly the same commands to install <code>pdf2svg</code> in your GitHub Actions workflows. See customizing GitHub-hosted runners.</p> <p>Check this Repology page to see which other Linux distributions or package managers have pdf2svg available.</p>"},{"location":"articles/setup/#write-snapshot-tests","title":"Write snapshot tests","text":"<p>Assume your function can already generate (technically) reproducible PDF outputs. You can then write snapshot tests for it with pytest and tinyvdiff. An example test looks like this:</p> <pre><code>import pytest\n\nfrom tinyvdiff_demo.matplotlib import generate_plot\n\n\n@pytest.fixture\ndef temp_pdf(tmp_path):\n    \"\"\"Fixture to create a temporary PDF file path\"\"\"\n    return tmp_path / \"test.pdf\"\n\n\ndef test_matplotlib_visual(tinyvdiff, temp_pdf):\n    \"\"\"Test visual regression with PDF generated with matplotlib\"\"\"\n    pdf_path = generate_plot(temp_pdf)\n    tinyvdiff.assert_pdf_snapshot(pdf_path, \"snapshot_matplotlib.svg\")\n</code></pre> <p>The tests normally lives in <code>tests/test_*.py</code>.</p>"},{"location":"articles/setup/#generate-snapshots","title":"Generate snapshots","text":"<p>To generate the snapshots, run this command in terminal:</p> <pre><code>pytest --tinyvdiff-update\n</code></pre> <p>The snapshots will be stored in <code>tests/snapshots/</code> by default. Both single-page and multi-page PDF inputs are supported. For multi-page PDFs, a two-page PDF with the target snapshot name <code>snapshot_example.svg</code> will become <code>snapshot_example_p1.svg</code> and <code>snapshot_example_p2.svg</code>.</p> <p>If the snapshots need to be updated, regenerate them using the same command.</p> <p>After the snapshots are ready, run <code>pytest</code> in the terminal to check whether the tests can pass.</p>"},{"location":"articles/setup/#run-on-cicd","title":"Run on CI/CD","text":"<p>Commit and push the snapshots to the remote repository. See if the tests can pass in CI/CD workflows.</p> <p>To emphasize our assumption: any subtle differences, such as OS version, system fonts, or dependencies can lead to inconsistent SVG outputs, so make sure the environment that generates the snapshots is as similar as the CI/CD environment. Or, use the strategy detailed in the last two sections of this guide.</p>"},{"location":"articles/setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"articles/setup/#custom-pdf2svg-path","title":"Custom pdf2svg path","text":"<p>If you do not have permission to install <code>pdf2svg</code> globally, you can customize the location of the <code>pdf2svg</code> executable for the pytest plugin.</p> <p>For example, you can run tests with the <code>--tinyvdiff-pdf2svg</code> option:</p> <pre><code>pytest --tinyvdiff-pdf2svg=/custom/path/pdf2svg\n</code></pre> <p>Or, apply the custom path using pytest configuration files.</p>"},{"location":"articles/setup/#use-snapshots-from-target-platform","title":"Use snapshots from target platform","text":"<p>Sometimes, it is challenging to pinpoint the source of technical differences between the snapshots generated by the CI/CD runners and local development environment. Using snapshots from one platform and only run these tests on that target platform is a simple mitigation strategy.</p> <p>For example, assume you have confirmed that the apperance of the snapshots from the CI/CD runners is accurate - you can let the runner update the snapshots, download the snapshots as artifacts, and use them as reference snapshots in the repository directly. In a GitHub Actions workflow:</p> <pre><code>jobs:\n    steps:\n      - name: Test with pytest\n        run: |\n          pytest --tinyvdiff-update\n      - name: Upload snapshot artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: test-snapshots-py${{ matrix.python-version }}\n          path: tests/snapshots/\n</code></pre> <p>Run the workflow and download the artifacts from the job outputs page, where a download URL will be provided in the \"upload snapshot artifacts\" step.</p> <p>You can also do this the other way around: use the local platform snapshots as reference, and only run these tests locally while skipping them in CI/CD. This might be a simpler solution especially if you value running tests locally and running them often.</p> <p>See the next section on how to limit these tests to only run on the target platform.</p>"},{"location":"articles/setup/#skip-tests-except-for-target-platform","title":"Skip tests except for target platform","text":"<p>Running visual regression tests conditionally on only one platform is useful, especially if:</p> <ul> <li>Your selected CI/CD platform is different from your local development platform.</li> <li>The snapshots generated by the two platforms are different and   are difficult to align.</li> <li>You have decided to use the snapshots generated by the CI/CD platform   (or the local platform) as reference snapshots.</li> </ul> <p>For example, skip the tests except when running on Linux:</p> <pre><code>import platform\n\nskip_if_not_linux = pytest.mark.skipif(\n    platform.system() != \"Linux\", reason=\"These tests only run on Linux\"\n)\n\n@skip_if_not_linux\ndef test_matplotlib_visual(tinyvdiff, temp_pdf):\n    ...\n</code></pre>"},{"location":"reference/pdf/","title":"pdf operations","text":""},{"location":"reference/pdf/#tinyvdiff.pdf","title":"<code>tinyvdiff.pdf</code>","text":""},{"location":"reference/pdf/#tinyvdiff.pdf.get_pdf_page_count","title":"<code>get_pdf_page_count(pdf_path)</code>","text":"<p>Get the number of pages in a PDF file.</p> <p>Parameters:</p> Name Type Description Default <code>pdf_path</code> <code>str | Path</code> <p>Path to the PDF file.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Number of pages in the PDF file.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the PDF file does not exist.</p> <code>ValueError</code> <p>If the file is not a valid PDF.</p>"},{"location":"reference/pdf2svg/","title":"pdf2svg wrapper","text":""},{"location":"reference/pdf2svg/#tinyvdiff.pdf2svg","title":"<code>tinyvdiff.pdf2svg</code>","text":""},{"location":"reference/pdf2svg/#tinyvdiff.pdf2svg.PDF2SVG","title":"<code>PDF2SVG</code>","text":"<p>Wrapper for the pdf2svg command line tool.</p>"},{"location":"reference/pdf2svg/#tinyvdiff.pdf2svg.PDF2SVG.__init__","title":"<code>__init__(executable_path=None)</code>","text":"<p>Initialize PDF2SVG wrapper.</p> <p>Parameters:</p> Name Type Description Default <code>executable_path</code> <code>str | None</code> <p>Optional path to pdf2svg executable. If None, will attempt to locate it.</p> <code>None</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If pdf2svg executable from the canonical locations can't be found, or if a custom path is provided but does not exist.</p>"},{"location":"reference/pdf2svg/#tinyvdiff.pdf2svg.PDF2SVG.convert","title":"<code>convert(input_path, output_path=None, page=None)</code>","text":"<p>Convert PDF to SVG using pdf2svg.</p> <p>Parameters:</p> Name Type Description Default <code>input_path</code> <code>str | Path</code> <p>Path to input PDF file.</p> required <code>output_path</code> <code>str | Path | None</code> <p>Optional path for output SVG file. If None, uses input path with .svg extension.</p> <code>None</code> <code>page</code> <code>int | None</code> <p>Optional page number to convert (starting from 1).</p> <code>None</code> <p>Returns:</p> Type Description <code>Path</code> <p>Path to generated SVG file</p> <p>Raises:</p> Type Description <code>CalledProcessError</code> <p>If pdf2svg conversion fails.</p> <code>ValueError</code> <p>If page number is less than 1.</p> <code>FileNotFoundError</code> <p>If input file doesn't exist.</p>"},{"location":"reference/pdf2svg/#tinyvdiff.pdf2svg.PDF2SVG.is_available","title":"<code>is_available()</code>  <code>classmethod</code>","text":"<p>Check if pdf2svg is available on the system.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if pdf2svg executable can be found, False otherwise.</p>"},{"location":"reference/pytest_plugin/","title":"pytest plugin","text":""},{"location":"reference/pytest_plugin/#tinyvdiff.pytest_plugin","title":"<code>tinyvdiff.pytest_plugin</code>","text":""},{"location":"reference/pytest_plugin/#tinyvdiff.pytest_plugin.TinyVDiff","title":"<code>TinyVDiff</code>","text":"<p>Helper class for visual regression testing with PDFs.</p>"},{"location":"reference/pytest_plugin/#tinyvdiff.pytest_plugin.TinyVDiff.__init__","title":"<code>__init__(request)</code>","text":"<p>Initialize TinyVDiff with configuration from pytest.</p>"},{"location":"reference/pytest_plugin/#tinyvdiff.pytest_plugin.TinyVDiff.assert_pdf_snapshot","title":"<code>assert_pdf_snapshot(pdf_path, snapshot_name)</code>","text":"<p>Assert that a PDF matches its stored snapshot.</p> <p>Converts each page of the PDF to SVG and compares it with stored snapshots, updating the snapshots if requested via <code>--tinyvdiff-update</code>.</p> <p>Parameters:</p> Name Type Description Default <code>pdf_path</code> <code>Path | str</code> <p>Path to the PDF file to test.</p> required <code>snapshot_name</code> <code>str</code> <p>Base name for the snapshot files. For multi-page PDFs, page number will be inserted before file extension. For example, a two-page <code>test.pdf</code> becomes <code>test_p1.svg</code> and <code>test_p2.svg</code>.</p> required <p>Raises:</p> Type Description <code>Failed</code> <p>If snapshots do not match and updates are not enabled.</p>"},{"location":"reference/pytest_plugin/#tinyvdiff.pytest_plugin.tinyvdiff","title":"<code>tinyvdiff(request)</code>","text":"<p>Pytest fixture providing TinyVDiff functionality.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>FixtureRequest</code> <p>Pytest fixture request object.</p> required <p>Returns:</p> Type Description <code>TinyVDiff</code> <p>Configured TinyVDiff instance for the current test.</p>"},{"location":"reference/pytest_plugin/#tinyvdiff.pytest_plugin.pytest_addoption","title":"<code>pytest_addoption(parser)</code>","text":"<p>Add tinyvdiff command line options to pytest.</p> <p>Parameters:</p> Name Type Description Default <code>parser</code> <code>Parser</code> <p>pytest command line parser to extend.</p> required"},{"location":"reference/snapshot/","title":"snapshot utilities","text":""},{"location":"reference/snapshot/#tinyvdiff.snapshot","title":"<code>tinyvdiff.snapshot</code>","text":""},{"location":"reference/snapshot/#tinyvdiff.snapshot.normalize_svg","title":"<code>normalize_svg(svg_content)</code>","text":"<p>Normalize SVG content by removing variable content.</p> <p>Removes metadata and ID attributes that may vary between runs while preserving the visual content of the SVG.</p> <p>Parameters:</p> Name Type Description Default <code>svg_content</code> <code>str</code> <p>Raw SVG file content as string.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Normalized SVG content with variable content removed.</p>"},{"location":"reference/snapshot/#tinyvdiff.snapshot.compare_svgs","title":"<code>compare_svgs(generated_svg_path, snapshot_svg_path)</code>","text":"<p>Compare two SVG files by their normalized content.</p> <p>Parameters:</p> Name Type Description Default <code>generated_svg_path</code> <code>Path | str</code> <p>Path to the newly generated SVG file.</p> required <code>snapshot_svg_path</code> <code>Path | str</code> <p>Path to the snapshot SVG file to compare against.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the SVGs match after normalization, False otherwise.</p>"},{"location":"reference/snapshot/#tinyvdiff.snapshot.update_snapshot","title":"<code>update_snapshot(generated_svg_path, snapshot_svg_path)</code>","text":"<p>Update or create a snapshot SVG file from a generated SVG.</p> <p>Parameters:</p> Name Type Description Default <code>generated_svg_path</code> <code>Path | str</code> <p>Path to the source SVG file.</p> required <code>snapshot_svg_path</code> <code>Path | str</code> <p>Path where the snapshot should be saved.</p> required"}]}